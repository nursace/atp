Insertion sort modelling

a[] = 5 2 4 6 1 3
ind = 0 1 2 3 4 5

# iteration 1

i = 1
key = 2
j = 0

0 >= 0 && 5 > 2

a[1] = a[0]
5 5 4 6 1 3
0 1 2 3 4 5

j = -1

-1 >= 0 -> false

a[0] = 2
2 5 4 6 1 3
0 1 2 3 4 5

a[0:i]

# iteration 2

i = 2
key = 4
j = 1

1 >= 0 && 5 > 4
  a[2] = a[1]
  2 5 5 6 1 3
  0 1 2 3 4 5
  j = 0

0 >= 0 && 2 > 4

a[1] = 4
2 4 5 6 1 3
0 1 2 3 4 5


# iteration 3
i = 3
key = 6
j = 2

2 >= 0 && 5 > 6

a[3] = 6
2 4 5 6 1 3
0 1 2 3 4 5

# iteration 4

i = 4
key = 1
j = 3

3 >= 0 && 6 > 1
  a[4] = a[3]
  2 4 5 6 6 3
  0 1 2 3 4 5
  j = 2

2 >= 0 && 5 > 1
  a[3] = a[2]
  2 4 5 5 6 3
  0 1 2 3 4 5
  j = 1

1 >= 0 && 4 > 1
  a[2] = a[1]
  2 4 4 5 6 3
  0 1 2 3 4 5
  j = 0

0 >= 0 && 2 > 1
  a[1] = a[0]
  2 2 4 5 6 3
  j = -1

-1 >= 0 -> false

a[0] = 1
1 2 4 5 6 3
0 1 2 3 4 5

# iteration 5

i = 5
k = 3
j = 4

4 >= 0 && 6 > 3
  a[5] = a[4]
  1 2 4 5 6 6
  0 1 2 3 4 5
  j = 3

3 >= 0 && 5 > 3
  a[4] = a[3]
  1 2 4 5 5 6
  0 1 2 3 4 5
  j = 2

2 >= 0 && 4 > 3
  a[3] = a[2]
  1 2 4 4 5 6
  0 1 2 3 4 5
  j = 1

1 >= 0 && 2 > 3 -> false

a[2] = 3

1 2 3 4 5 6
0 1 2 3 4 5

i = 6
# end of algorithm



